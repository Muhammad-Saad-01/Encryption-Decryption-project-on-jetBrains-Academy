type: edu
custom_name: stage5
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.util.*;

    public class Main {
        public static void main(String[] args) {
            String option, text, key;
            StringBuilder ss = new StringBuilder("");
            Scanner read = new Scanner(System.in);
            HashMap<String, String> params = convertToKeyValuePair(args);
            option = params.get("mode");
            text = params.get("data");
            key = params.get("key");

            if (option == null)
                option = "enc";
            if (key == null)
                key = "0";
            if (text == null)
                text = "";
            var result = option.equals("enc") ? encrypt(text, Integer.parseInt(key)) : decrypt(text, Integer.parseInt(key));
            //params.forEach((k, v) -> System.out.println("Key : " + k + " Value : " + v));

            System.out.println(result);

        }

        private static HashMap<String, String> convertToKeyValuePair(String[] args) {

            HashMap<String, String> params = new HashMap<>();
            for (int i = 0; i < args.length; i += 2) {
                String key = args[i].substring(1);
                String value = args[i + 1];
                params.put(key, value);
            }

            return params;
        }

        public static StringBuilder encrypt(String text, int key) {
            //  c >= 'a' && c <= 'z' ? (char) ('z' - c + 'a') : c
            StringBuilder cypherText = new StringBuilder("");
            for (int i = 0; i < text.length(); i++) {
                char temp = text.charAt(i);
                int y = ((int) temp + key);
                cypherText.append((char) ((int) y));
                /*if (temp >= 'a' && temp <= 'z') {
                    int y = ((int) temp + key) %((int)'z');
                    // System.out.println(y);
                    if (y <= 97)
                        cypherText.append((char) ((int) y + 96));
                    else
                        cypherText.append((char) ((int) y));
                } else
                    cypherText.append(temp);
            */
            }
            //System.out.println(cypherText);
            return cypherText;
        }

        public static StringBuilder decrypt(String cypherText, int key) {
            //  c >= 'a' && c <= 'z' ? (char) ('z' - c + 'a') : c
            StringBuilder decryptText = new StringBuilder("");
            for (int i = 0; i < cypherText.length(); i++) {
                char temp = cypherText.charAt(i);
                int y = ((int) temp - key);
                decryptText.append((char) ((int) y));
                /*if (temp >= 'a' && temp <= 'z') {
                    int y = ((int) temp + key) %((int)'z');
                    // System.out.println(y);
                    if (y <= 97)
                        decryptText.append((char) ((int) y + 96));
                    else
                        decryptText.append((char) ((int) y));
                } else
                    decryptText.append(temp);
            */
            }
            //System.out.println(decryptText);
            return decryptText;
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: output.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/249/implement
status: Solved
record: 4
